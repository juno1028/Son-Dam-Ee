Sample 폴더에 담기는 건 뭘까?



1. Preprocess
python3 font2img.py --src_font=./fonts/source/NanumGothic.ttf --dst_font=./fonts/target/ --charset=./2350-common-hangul.txt  --sample_count=1000 --sample_dir=dir --filter=1 --shuffle=1

python3 package.py --dir=dir --save_dir=binary_save_directory --split_ratio=0.1

2. Experiment Layout

experiment/
└── data
    ├── train.obj
    └── val.obj

: 이런 파일 구조가 생성되어 있어야한다.


3. Train

python3 train.py --experiment_dir=./binary_save_directory --experiment_id=0 --batch_size=28 --lr=0.001 --epoch=100 --sample_steps=10 --schedule=10 --L1_penalty=100 --Lconst_penalty=15

워크스테이션 42번 : batch_size = 10
V100 : batch_size = 28

4. Infer and Interpolate - model 생성된 다음에 돌려볼 예정

python3 infer.py --model_dir=./binary_save_directory/ckpt/0_batch_14 --batch_size=14 --source_obj=./binary_save_directory/val.obj --embedding_ids=3 --save_dir=save_dir


(Interpolation)
python3 infer.py --model_dir=./binary_save_directory/ckpt/0_batch_14 --batch_size=14 --source_obj=./binary_save_directory/val.obj --embedding_ids=1,3 --save_dir=save_dir/frames/ --output_gif=./gif_path --interpolate=1 --steps=3 --uroboros=1

python infer.py --model_dir= checkpoint_dir/ 
                --batch_size=10
                --source_obj=obj_path 
                --embedding_ids=label[s] of the font, separate by comma
                --save_dir=frames/ 
                --output_gif=gif_path 
                --interpolate=1 
                --steps=10
                --uroboros=1


927 1894 9094
ateam

예은 41,준범 57, 연주 27, 준오 42, 혜원 48



1. Training 모델

1 : SN-GAN : 57번에서 완료
python3 train.py --experiment_dir=./binary_save_directory --experiment_id=0 --batch_size=14 --lr=0.001 --epoch=100 --sample_steps=10 --schedule=10 --L1_penalty=100 --Lconst_penalty=15 --d_norm_type=sn

2 : cycle GAN(Loss) 사용(전처리도 같이 함) : 163번에서 가동중
python3 train.py --experiment_dir=./binary_save_directory --experiment_id=0 --batch_size=14 --lr=0.001 --epoch=100 --sample_steps=10 --schedule=10 --L1_penalty=100 --Lconst_penalty=15 --cycle_gan=True

3 : L1_penalty 상향 적용(2배)(전처리도 같이 함) : 42번에서 가동중
python3 train.py --experiment_dir=./binary_save_directory --experiment_id=0 --batch_size=12 --lr=0.001 --epoch=100 --sample_steps=10 --schedule=10 --L1_penalty=200 --Lconst_penalty=15

4 : Lconst_penalty 상향 적용(2배) : 48번에서 완료
python3 train.py --experiment_dir=./binary_save_directory --experiment_id=0 --batch_size=12 --lr=0.001 --epoch=100 --sample_steps=10 --schedule=10 --L1_penalty=100 --Lconst_penalty=30

5 : Perceptual Loss
https://gist.github.com/alper111/8233cdb0414b4cb5853f2f730ab95a49#file-vgg_perceptual_loss-py-L18


6 : 전처리 crop and centering : 41번에서 완료
Font2img_2.py로 crop
python3 train.py --experiment_dir=./binary_save_directory --experiment_id=0 --batch_size=14 --lr=0.001 --epoch=100 --sample_steps=10 --schedule=10 --L1_penalty=100 --Lconst_penalty=15


7 : Ltv_penalty(true_fake_loss) 상향 적용(2배) - 안 함

8 : category_loss(category_loss) 상향 적용(2배) - 안 함





* 현재 우리가 가지고 있는 모델 : 

1. 기본 모델 : 2가지(#163__완료, #42__완료 - 다운로드 완료)
2. 전처리(crop, centering, padding)만 된 거 : 1가지(#41__완료 - 다운로드 완료)
3. 전처리하고, L1_penalty 100에서 200으로 조정한 거 : 1가지(#42)
4. Lconst_penalty 15에서 30으로 조정한 거 : 1가지(#48__완료 - 다운로드 완료)
5. SNGAN(spectral normalization) 적용된 거 : 1가지(#57__완료 - 다운로드 완료)
6. 전처리하고, Cycle GAN 적용된 거 : 1가지(#163)
7. SRGAN : 적용 예정

8.
9.
10.

지금 놀고 있는 컴퓨터 : #41, #48, #57, #27

